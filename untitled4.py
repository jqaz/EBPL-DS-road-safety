# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x_BSbGNPEAB4_q3Kxnz6MZ8o86lHS1jA
"""

"""
Enhancing Road Safety with AI-Driven Traffic Accident Analysis and Prediction

This script:
- Loads a CSV file with traffic accident data
- Preprocesses the data
- Trains a RandomForest model to predict accident severity
- Evaluates the model
- Saves the trained model

Works in both terminal and interactive environments like Jupyter/Colab.
"""

import pandas as pd
import os
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
import joblib

# ========== Step 1: Ask for CSV file path ==========
csv_path = input("Enter the path to your CSV file (e.g., accidents.csv): ")

if not os.path.exists(csv_path):
    print(f"Error: File '{csv_path}' not found.")
    exit(1)

print(f"\nLoading data from: {csv_path}")
df = pd.read_csv(csv_path)

# ========== Step 2: Basic Preprocessing ==========
print("\nInitial Data Preview:")
print(df.head())

# Drop rows with missing values
df.dropna(inplace=True)

# Required columns
required_columns = ['Weather', 'Road_Condition', 'Speed_Limit', 'Severity']
for col in required_columns:
    if col not in df.columns:
        print(f"Missing required column: {col}")
        exit(1)

# Encode features
X = df[['Weather', 'Road_Condition', 'Speed_Limit']]
X = pd.get_dummies(X)

y = df['Severity']

# ========== Step 3: Train-Test Split ==========
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# ========== Step 4: Train the Model ==========
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# ========== Step 5: Evaluate ==========
y_pred = model.predict(X_test)
print("\nModel Evaluation Report:")
print(classification_report(y_test, y_pred))

# ========== Step 6: Save the Model ==========
os.makedirs("models", exist_ok=True)
model_path = "models/traffic_model.pkl"
joblib.dump(model, model_path)
print(f"\n‚úÖ Model saved to: {model_path}")

"""
Enhancing Road Safety with AI-Driven Traffic Accident Analysis and Prediction

This script:
- Lets the user select a CSV file using a file dialog
- Loads and preprocesses the data
- Trains a RandomForest model
- Evaluates and saves the model
"""

import pandas as pd
import os
from tkinter import Tk, filedialog
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
import joblib

# ========== Step 1: Open File Dialog ==========
print("üìÇ Please select a CSV file...")

# Hide the root Tkinter window
root = Tk()
root.withdraw()

csv_path = filedialog.askopenfilename(
    title="Select CSV File",
    filetypes=[("CSV Files", "*.csv")]
)

if not csv_path:
    print("‚ùå No file selected. Exiting.")
    exit(1)

print(f"\n‚úÖ File selected: {csv_path}")

# ========== Step 2: Load Data ==========
df = pd.read_csv(csv_path)

# ========== Step 3: Basic Preprocessing ==========
print("\nüîé Preview of the data:")
print(df.head())

# Drop missing values
df.dropna(inplace=True)

# Check for required columns
required_columns = ['Weather', 'Road_Condition', 'Speed_Limit', 'Severity']
for col in required_columns:
    if col not in df.columns:
        print(f"‚ùå Missing required column: {col}")
        exit(1)

# Encode categorical variables
X = df[['Weather', 'Road_Condition', 'Speed_Limit']]
X = pd.get_dummies(X)

y = df['Severity']

# ========== Step 4: Train/Test Split ==========
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# ========== Step 5: Train Model ==========
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# ========== Step 6: Evaluate ==========
y_pred = model.predict(X_test)
print("\nüìä Model Evaluation:")
print(classification_report(y_test, y_pred))

# ========== Step 7: Save Model ==========
os.makedirs("models", exist_ok=True)
model_path = "models/traffic_model.pkl"
joblib.dump(model, model_path)
print(f"\nüíæ Model saved to: {

"""
Enhancing Road Safety with AI-Driven Traffic Accident Analysis and Prediction

This script:
- Lets the user select a CSV file using a file dialog
- Loads and preprocesses the data
- Trains a RandomForest model
- Evaluates and saves the model
"""

import pandas as pd
import os
from tkinter import Tk, filedialog
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
import joblib

# ========== Step 1: Open File Dialog ==========
print("üìÇ Please select a CSV file...")

# Hide the root Tkinter window
root = Tk()
root.withdraw()

csv_path = filedialog.askopenfilename(
    title="Select CSV File",
    filetypes=[("CSV Files", "*.csv")]
)

if not csv_path:
    print("‚ùå No file selected. Exiting.")
    exit(1)

print(f"\n‚úÖ File selected: {csv_path}")

# ========== Step 2: Load Data ==========
df = pd.read_csv(csv_path)

# ========== Step 3: Basic Preprocessing ==========
print("\nüîé Preview of the data:")
print(df.head())

# Drop missing values
df.dropna(inplace=True)

# Check for required columns
required_columns = ['Weather', 'Road_Condition', 'Speed_Limit', 'Severity']
for col in required_columns:
    if col not in df.columns:
        print(f"‚ùå Missing required column: {col}")
        exit(1)

# Encode categorical variables
X = df[['Weather', 'Road_Condition', 'Speed_Limit']]
X = pd.get_dummies(X)

y = df['Severity']

# ========== Step 4: Train/Test Split ==========
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# ========== Step 5: Train Model ==========
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# ========== Step 6: Evaluate ==========
y_pred = model.predict(X_test)
print("\nüìä Model Evaluation:")
print(classification_report(y_test, y_pred))

# ========== Step 7: Save Model ==========
os.makedirs("models", exist_ok=True)
model_path = "models/traffic_model.pkl"
joblib.dump(model, model_path)
print(f"\nModel saved to: {model_path}")

"""
AI-Driven Traffic Accident Analysis ‚Äì Works in Google Colab or Jupyter (no GUI needed)
"""

import pandas as pd
import os
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
import joblib

# ========== Step 1: File Upload (Colab-compatible) ==========
try:
    from google.colab import files
    uploaded = files.upload()  # Prompts user to upload a CSV file
    for filename in uploaded.keys():
        csv_path = filename
except ImportError:
    csv_path = input("Enter the path to your CSV file: ")

if not os.path.exists(csv_path):
    print(f"‚ùå File not found: {csv_path}")
    exit(1)

print(f"\n‚úÖ File selected: {csv_path}")

# ========== Step 2: Load Data ==========
df = pd.read_csv(csv_path)

# ========== Step 3: Preprocessing ==========
print("\nüîé Data preview:")
print(df.head())

df.dropna(inplace=True)

required_columns = ['Weather', 'Road_Condition', 'Speed_Limit', 'Severity']
for col in required_columns:
    if col not in df.columns:
        print(f"‚ùå Missing column: {col}")
        exit(1)

X = df[['Weather', 'Road_Condition', 'Speed_Limit']]
X = pd.get_dummies(X)
y = df['Severity']

# ========== Step 4: Train-Test Split ==========
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# ========== Step 5: Train Model ==========
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# ========== Step 6: Evaluate ==========
y_pred = model.predict(X_test)
print("\nüìä Model Evaluation:")
print(classification_report(y_test, y_pred))

# ========== Step 7: Save Model ==========
os.makedirs("models", exist_ok=True)
model_path = "models/traffic_model.pkl"
joblib.dump(model, model_path)
print(f"\n‚úÖ Model saved to: {model_path}")